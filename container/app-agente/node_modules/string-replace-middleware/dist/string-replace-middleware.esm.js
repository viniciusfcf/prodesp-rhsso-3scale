import hijackResponse from 'hijackresponse';
import { Transform } from 'stream';
import escapeStringRegexp from 'escape-string-regexp';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultOptions = {
  encoding: 'utf8',
  ignoreCase: true
};

function buildReplacers(replacements, opts) {
  return Object.keys(replacements).sort(function (a, b) {
    return b.length - a.length;
  }).map(function (search) {
    return {
      matcher: new RegExp(escapeStringRegexp(search), opts.ignoreCase ? 'gmi' : 'gm'),
      replace: replacements[search]
    };
  });
}

function getMaxSearchLength(replacements) {
  return Object.keys(replacements).reduce(function (acc, search) {
    return Math.max(acc, search.length);
  }, 0);
}

function StringReplaceStream(replacements, options) {
  if (options === void 0) {
    options = {};
  }

  var opts = _extends({}, defaultOptions, options);

  var replacers = buildReplacers(replacements, opts);
  var maxSearchLength = getMaxSearchLength(replacements);
  var tail = '';

  var replaceSlidingWindow = function replaceSlidingWindow(haystack, replacers, replaceBefore) {
    /**
     * foo => foo123
     * foo ba | r ba
     * foo123 ba | r baz
     * foo123 | bar baz
     *
     * foo => f
     * foo bar baz => f bar baz
     */
    var body = haystack;
    replacers.forEach(function (replacer) {
      body = body.slice(0, replaceBefore).replace(replacer.matcher, replacer.replace) + body.slice(replaceBefore);
    });
    return [body.slice(0, replaceBefore), body.slice(replaceBefore)];
  };

  var transform = function transform(buf, _enc, cb) {
    var replaceBefore = maxSearchLength * 2;
    var haystack = tail + buf.toString(opts.encoding);
    var body = '';

    if (haystack.length < maxSearchLength * 3 - 2) {
      tail = haystack;
      cb(null, '');
      return;
    }

    var _replaceSlidingWindow = replaceSlidingWindow(haystack, replacers, replaceBefore);

    body = _replaceSlidingWindow[0];
    tail = _replaceSlidingWindow[1];
    cb(null, body);
  };

  var flush = function flush(cb) {
    if (!tail) {
      cb();
      return;
    }

    var body = replacers.reduce(function (acc, replacer) {
      return acc.replace(replacer.matcher, replacer.replace);
    }, tail);
    cb(null, body);
  };

  return new Transform({
    transform: transform,
    flush: flush
  });
}

var defaultOptions$1 = {
  contentTypeFilterRegexp: /^text\/|^application\/json$|^application\/xml$/
};
var stringReplace = function stringReplace(replacements, options) {
  if (options === void 0) {
    options = {};
  }

  var opts = _extends({}, defaultOptions$1, options);

  return function (_req, res, next) {
    hijackResponse(res, function (err, res) {
      var contentType = res.get('content-type');

      if (opts.contentTypeFilterRegexp.test(contentType)) {
        if (err) {
          res.unhijack(); // Make the original res object work again

          return next(err);
        }

        res.removeHeader('content-length');
        res.pipe(StringReplaceStream(replacements)).pipe(res);
      } else {
        return res.unhijack();
      }
    });
    next();
  };
};
module.exports = stringReplace;
module.exports.stringReplace = stringReplace;

export { stringReplace };
//# sourceMappingURL=string-replace-middleware.esm.js.map
