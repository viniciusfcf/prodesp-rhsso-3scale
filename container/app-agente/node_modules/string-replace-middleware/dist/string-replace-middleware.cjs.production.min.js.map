{"version":3,"file":"string-replace-middleware.cjs.production.min.js","sources":["../src/stringReplaceStream.ts","../src/index.ts"],"sourcesContent":["import { Transform, TransformCallback } from 'stream';\nimport escapeStringRegexp from 'escape-string-regexp';\n\ntype Options = {\n  encoding: BufferEncoding;\n  ignoreCase: boolean;\n};\ntype Replacer = {\n  matcher: RegExp;\n  replace: string;\n};\n\nconst defaultOptions: Options = {\n  encoding: 'utf8',\n  ignoreCase: true,\n};\n\nfunction buildReplacers(\n  replacements: Record<string, string>,\n  opts: Options\n): Replacer[] {\n  return Object.keys(replacements)\n    .sort((a, b) => b.length - a.length)\n    .map(search => ({\n      matcher: new RegExp(\n        escapeStringRegexp(search),\n        opts.ignoreCase ? 'gmi' : 'gm'\n      ),\n      replace: replacements[search],\n    }));\n}\n\nfunction getMaxSearchLength(replacements: Record<string, string>): number {\n  return Object.keys(replacements).reduce(\n    (acc, search) => Math.max(acc, search.length),\n    0\n  );\n}\n\nexport default function StringReplaceStream(\n  replacements: Record<string, string>,\n  options: Partial<Options> = {}\n) {\n  const opts: Options = { ...defaultOptions, ...options };\n  const replacers = buildReplacers(replacements, opts);\n  const maxSearchLength = getMaxSearchLength(replacements);\n  let tail = '';\n\n  const replaceSlidingWindow = (\n    haystack: string,\n    replacers: Replacer[],\n    replaceBefore: number\n  ) => {\n    /**\n     * foo => foo123\n     * foo ba | r ba\n     * foo123 ba | r baz\n     * foo123 | bar baz\n     *\n     * foo => f\n     * foo bar baz => f bar baz\n     */\n    let body = haystack;\n    replacers.forEach(replacer => {\n      body =\n        body\n          .slice(0, replaceBefore)\n          .replace(replacer.matcher, replacer.replace) +\n        body.slice(replaceBefore);\n    });\n\n    return [body.slice(0, replaceBefore), body.slice(replaceBefore)];\n  };\n\n  const transform = function(\n    buf: Buffer,\n    _enc: BufferEncoding,\n    cb: TransformCallback\n  ) {\n    const replaceBefore = maxSearchLength * 2;\n    const haystack = tail + buf.toString(opts.encoding);\n    let body = '';\n\n    if (haystack.length < maxSearchLength * 3 - 2) {\n      tail = haystack;\n      cb(null, '');\n      return;\n    }\n\n    [body, tail] = replaceSlidingWindow(haystack, replacers, replaceBefore);\n\n    cb(null, body);\n  };\n  const flush = function(cb: TransformCallback) {\n    if (!tail) {\n      cb();\n      return;\n    }\n\n    const body = replacers.reduce(\n      (acc, replacer) => acc.replace(replacer.matcher, replacer.replace),\n      tail\n    );\n    cb(null, body);\n  };\n\n  return new Transform({ transform, flush });\n}\n","import { NextFunction, Request, Response } from 'express';\nimport hijackResponse from 'hijackresponse';\nimport stringReplaceStream from './stringReplaceStream';\n\nexport type Options = Record<'contentTypeFilterRegexp', RegExp>;\n\nconst defaultOptions: Options = {\n  contentTypeFilterRegexp: /^text\\/|^application\\/json$|^application\\/xml$/,\n};\n\nexport const stringReplace = (\n  replacements: Record<string, string>,\n  options: Partial<Options> = {}\n) => {\n  const opts = { ...defaultOptions, ...options };\n  return (_req: Request, res: Response, next: NextFunction) => {\n    hijackResponse(res, function(err, res) {\n      const contentType = res.get('content-type');\n      if (opts.contentTypeFilterRegexp.test(contentType)) {\n        if (err) {\n          res.unhijack(); // Make the original res object work again\n          return next(err);\n        }\n        res.removeHeader('content-length');\n        res.pipe(stringReplaceStream(replacements)).pipe(res);\n      } else {\n        return res.unhijack();\n      }\n    });\n    next();\n  };\n};\n\nmodule.exports = stringReplace;\nmodule.exports.stringReplace = stringReplace;"],"names":["defaultOptions","encoding","ignoreCase","contentTypeFilterRegexp","stringReplace","replacements","options","opts","_req","res","next","hijackResponse","err","contentType","get","test","unhijack","removeHeader","pipe","replacers","Object","keys","sort","a","b","length","map","search","matcher","RegExp","escapeStringRegexp","replace","buildReplacers","maxSearchLength","reduce","acc","Math","max","getMaxSearchLength","tail","Transform","transform","buf","_enc","cb","replaceBefore","haystack","toString","body","forEach","replacer","slice","replaceSlidingWindow","flush","stringReplaceStream","module","exports"],"mappings":"qbAYA,IAAMA,EAA0B,CAC9BC,SAAU,OACVC,YAAY,GCRRF,EAA0B,CAC9BG,wBAAyB,kDAGdC,EAAgB,SAC3BC,EACAC,YAAAA,IAAAA,EAA4B,QAEtBC,OAAYP,EAAmBM,UAC9B,SAACE,EAAeC,EAAeC,GACpCC,EAAeF,GAAK,SAASG,EAAKH,OAC1BI,EAAcJ,EAAIK,IAAI,uBACxBP,EAAKJ,wBAAwBY,KAAKF,GAChCD,GACFH,EAAIO,WACGN,EAAKE,KAEdH,EAAIQ,aAAa,uBACjBR,EAAIS,cDgBVb,EACAC,YAAAA,IAAAA,EAA4B,QAEtBC,OAAqBP,EAAmBM,GACxCa,EA3BR,SACEd,EACAE,UAEOa,OAAOC,KAAKhB,GAChBiB,MAAK,SAACC,EAAGC,UAAMA,EAAEC,OAASF,EAAEE,UAC5BC,KAAI,SAAAC,SAAW,CACdC,QAAS,IAAIC,OACXC,EAAmBH,GACnBpB,EAAKL,WAAa,MAAQ,MAE5B6B,QAAS1B,EAAasB,OAgBRK,CAAe3B,EAAcE,GACzC0B,EAbR,SAA4B5B,UACnBe,OAAOC,KAAKhB,GAAc6B,QAC/B,SAACC,EAAKR,UAAWS,KAAKC,IAAIF,EAAKR,EAAOF,UACtC,GAUsBa,CAAmBjC,GACvCkC,EAAO,UA4DJ,IAAIC,YAAU,CAAEC,UAhCL,SAChBC,EACAC,EACAC,OAEMC,EAAkC,EAAlBZ,EAChBa,EAAWP,EAAOG,EAAIK,SAASxC,EAAKN,aAGtC6C,EAASrB,OAA2B,EAAlBQ,EAAsB,SAC1CM,EAAOO,OACPF,EAAG,KAAM,UArCgB,SAC3BE,EACA3B,EACA0B,OAWIG,EAAOF,SACX3B,EAAU8B,SAAQ,SAAAC,GAChBF,EACEA,EACGG,MAAM,EAAGN,GACTd,QAAQmB,EAAStB,QAASsB,EAASnB,SACtCiB,EAAKG,MAAMN,MAGR,CAACG,EAAKG,MAAM,EAAGN,GAAgBG,EAAKG,MAAMN,IAkBlCO,CAAqBN,EAAU3B,EAAW0B,GAAlDN,OAEPK,EAAG,YAe6BS,MAbpB,SAAST,GAChBL,EASLK,EAAG,KAJUzB,EAAUe,QACrB,SAACC,EAAKe,UAAaf,EAAIJ,QAAQmB,EAAStB,QAASsB,EAASnB,WAC1DQ,IANAK,OCvEWU,CAAoBjD,IAAea,KAAKT,IAE1CA,EAAIO,cAGfN,MAIJ6C,OAAOC,QAAUpD,EACjBmD,OAAOC,QAAQpD,cAAgBA"}