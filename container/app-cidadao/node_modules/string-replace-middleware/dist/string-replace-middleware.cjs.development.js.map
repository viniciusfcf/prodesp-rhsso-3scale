{"version":3,"file":"string-replace-middleware.cjs.development.js","sources":["../src/stringReplaceStream.ts","../src/index.ts"],"sourcesContent":["import { Transform, TransformCallback } from 'stream';\nimport escapeStringRegexp from 'escape-string-regexp';\n\ntype Options = {\n  encoding: BufferEncoding;\n  ignoreCase: boolean;\n};\ntype Replacer = {\n  matcher: RegExp;\n  replace: string;\n};\n\nconst defaultOptions: Options = {\n  encoding: 'utf8',\n  ignoreCase: true,\n};\n\nfunction buildReplacers(\n  replacements: Record<string, string>,\n  opts: Options\n): Replacer[] {\n  return Object.keys(replacements)\n    .sort((a, b) => b.length - a.length)\n    .map(search => ({\n      matcher: new RegExp(\n        escapeStringRegexp(search),\n        opts.ignoreCase ? 'gmi' : 'gm'\n      ),\n      replace: replacements[search],\n    }));\n}\n\nfunction getMaxSearchLength(replacements: Record<string, string>): number {\n  return Object.keys(replacements).reduce(\n    (acc, search) => Math.max(acc, search.length),\n    0\n  );\n}\n\nexport default function StringReplaceStream(\n  replacements: Record<string, string>,\n  options: Partial<Options> = {}\n) {\n  const opts: Options = { ...defaultOptions, ...options };\n  const replacers = buildReplacers(replacements, opts);\n  const maxSearchLength = getMaxSearchLength(replacements);\n  let tail = '';\n\n  const replaceSlidingWindow = (\n    haystack: string,\n    replacers: Replacer[],\n    replaceBefore: number\n  ) => {\n    /**\n     * foo => foo123\n     * foo ba | r ba\n     * foo123 ba | r baz\n     * foo123 | bar baz\n     *\n     * foo => f\n     * foo bar baz => f bar baz\n     */\n    let body = haystack;\n    replacers.forEach(replacer => {\n      body =\n        body\n          .slice(0, replaceBefore)\n          .replace(replacer.matcher, replacer.replace) +\n        body.slice(replaceBefore);\n    });\n\n    return [body.slice(0, replaceBefore), body.slice(replaceBefore)];\n  };\n\n  const transform = function(\n    buf: Buffer,\n    _enc: BufferEncoding,\n    cb: TransformCallback\n  ) {\n    const replaceBefore = maxSearchLength * 2;\n    const haystack = tail + buf.toString(opts.encoding);\n    let body = '';\n\n    if (haystack.length < maxSearchLength * 3 - 2) {\n      tail = haystack;\n      cb(null, '');\n      return;\n    }\n\n    [body, tail] = replaceSlidingWindow(haystack, replacers, replaceBefore);\n\n    cb(null, body);\n  };\n  const flush = function(cb: TransformCallback) {\n    if (!tail) {\n      cb();\n      return;\n    }\n\n    const body = replacers.reduce(\n      (acc, replacer) => acc.replace(replacer.matcher, replacer.replace),\n      tail\n    );\n    cb(null, body);\n  };\n\n  return new Transform({ transform, flush });\n}\n","import { NextFunction, Request, Response } from 'express';\nimport hijackResponse from 'hijackresponse';\nimport stringReplaceStream from './stringReplaceStream';\n\nexport type Options = Record<'contentTypeFilterRegexp', RegExp>;\n\nconst defaultOptions: Options = {\n  contentTypeFilterRegexp: /^text\\/|^application\\/json$|^application\\/xml$/,\n};\n\nexport const stringReplace = (\n  replacements: Record<string, string>,\n  options: Partial<Options> = {}\n) => {\n  const opts = { ...defaultOptions, ...options };\n  return (_req: Request, res: Response, next: NextFunction) => {\n    hijackResponse(res, function(err, res) {\n      const contentType = res.get('content-type');\n      if (opts.contentTypeFilterRegexp.test(contentType)) {\n        if (err) {\n          res.unhijack(); // Make the original res object work again\n          return next(err);\n        }\n        res.removeHeader('content-length');\n        res.pipe(stringReplaceStream(replacements)).pipe(res);\n      } else {\n        return res.unhijack();\n      }\n    });\n    next();\n  };\n};\n\nmodule.exports = stringReplace;\nmodule.exports.stringReplace = stringReplace;"],"names":["defaultOptions","encoding","ignoreCase","buildReplacers","replacements","opts","Object","keys","sort","a","b","length","map","search","matcher","RegExp","escapeStringRegexp","replace","getMaxSearchLength","reduce","acc","Math","max","StringReplaceStream","options","replacers","maxSearchLength","tail","replaceSlidingWindow","haystack","replaceBefore","body","forEach","replacer","slice","transform","buf","_enc","cb","toString","flush","Transform","contentTypeFilterRegexp","stringReplace","_req","res","next","hijackResponse","err","contentType","get","test","unhijack","removeHeader","pipe","stringReplaceStream","module","exports"],"mappings":"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"}